// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: match_server.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Proto {
  public static partial class MatchServices
  {
    static readonly string __ServiceName = "Proto.MatchServices";

    static readonly grpc::Marshaller<global::Proto.S2M_CreateMatchGroup> __Marshaller_Proto_S2M_CreateMatchGroup = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.S2M_CreateMatchGroup.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.M2S_CreateMatchGroup> __Marshaller_Proto_M2S_CreateMatchGroup = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.M2S_CreateMatchGroup.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.S2M_StartMatch> __Marshaller_Proto_S2M_StartMatch = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.S2M_StartMatch.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.M2S_StartMatch> __Marshaller_Proto_M2S_StartMatch = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.M2S_StartMatch.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.S2M_TryToReJoinMatch> __Marshaller_Proto_S2M_TryToReJoinMatch = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.S2M_TryToReJoinMatch.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.M2S_TryToReJoinMatch> __Marshaller_Proto_M2S_TryToReJoinMatch = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.M2S_TryToReJoinMatch.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.S2M_JoinMatchGroup> __Marshaller_Proto_S2M_JoinMatchGroup = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.S2M_JoinMatchGroup.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.M2S_JoinMatchGroup> __Marshaller_Proto_M2S_JoinMatchGroup = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.M2S_JoinMatchGroup.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.S2M_LeaveMatchGroup> __Marshaller_Proto_S2M_LeaveMatchGroup = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.S2M_LeaveMatchGroup.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.M2S_LeaveMatchGroup> __Marshaller_Proto_M2S_LeaveMatchGroup = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.M2S_LeaveMatchGroup.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.S2M_FinishBattle> __Marshaller_Proto_S2M_FinishBattle = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.S2M_FinishBattle.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.M2S_FinishBattle> __Marshaller_Proto_M2S_FinishBattle = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.M2S_FinishBattle.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.S2M_KillUser> __Marshaller_Proto_S2M_KillUser = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.S2M_KillUser.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.M2S_KillUser> __Marshaller_Proto_M2S_KillUser = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.M2S_KillUser.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.S2M_ExitBattle> __Marshaller_Proto_S2M_ExitBattle = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.S2M_ExitBattle.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.M2S_ExitBattle> __Marshaller_Proto_M2S_ExitBattle = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.M2S_ExitBattle.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.S2M_CreateMatchGroup, global::Proto.M2S_CreateMatchGroup> __Method_CreateMatchGroup = new grpc::Method<global::Proto.S2M_CreateMatchGroup, global::Proto.M2S_CreateMatchGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMatchGroup",
        __Marshaller_Proto_S2M_CreateMatchGroup,
        __Marshaller_Proto_M2S_CreateMatchGroup);

    static readonly grpc::Method<global::Proto.S2M_StartMatch, global::Proto.M2S_StartMatch> __Method_StartMatch = new grpc::Method<global::Proto.S2M_StartMatch, global::Proto.M2S_StartMatch>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartMatch",
        __Marshaller_Proto_S2M_StartMatch,
        __Marshaller_Proto_M2S_StartMatch);

    static readonly grpc::Method<global::Proto.S2M_TryToReJoinMatch, global::Proto.M2S_TryToReJoinMatch> __Method_TryToReJoinMatch = new grpc::Method<global::Proto.S2M_TryToReJoinMatch, global::Proto.M2S_TryToReJoinMatch>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TryToReJoinMatch",
        __Marshaller_Proto_S2M_TryToReJoinMatch,
        __Marshaller_Proto_M2S_TryToReJoinMatch);

    static readonly grpc::Method<global::Proto.S2M_JoinMatchGroup, global::Proto.M2S_JoinMatchGroup> __Method_JoinMatchGroup = new grpc::Method<global::Proto.S2M_JoinMatchGroup, global::Proto.M2S_JoinMatchGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "JoinMatchGroup",
        __Marshaller_Proto_S2M_JoinMatchGroup,
        __Marshaller_Proto_M2S_JoinMatchGroup);

    static readonly grpc::Method<global::Proto.S2M_LeaveMatchGroup, global::Proto.M2S_LeaveMatchGroup> __Method_LeaveMatchGroup = new grpc::Method<global::Proto.S2M_LeaveMatchGroup, global::Proto.M2S_LeaveMatchGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LeaveMatchGroup",
        __Marshaller_Proto_S2M_LeaveMatchGroup,
        __Marshaller_Proto_M2S_LeaveMatchGroup);

    static readonly grpc::Method<global::Proto.S2M_FinishBattle, global::Proto.M2S_FinishBattle> __Method_FinishBattle = new grpc::Method<global::Proto.S2M_FinishBattle, global::Proto.M2S_FinishBattle>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FinishBattle",
        __Marshaller_Proto_S2M_FinishBattle,
        __Marshaller_Proto_M2S_FinishBattle);

    static readonly grpc::Method<global::Proto.S2M_KillUser, global::Proto.M2S_KillUser> __Method_KllUser = new grpc::Method<global::Proto.S2M_KillUser, global::Proto.M2S_KillUser>(
        grpc::MethodType.Unary,
        __ServiceName,
        "KllUser",
        __Marshaller_Proto_S2M_KillUser,
        __Marshaller_Proto_M2S_KillUser);

    static readonly grpc::Method<global::Proto.S2M_ExitBattle, global::Proto.M2S_ExitBattle> __Method_ExitBattle = new grpc::Method<global::Proto.S2M_ExitBattle, global::Proto.M2S_ExitBattle>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExitBattle",
        __Marshaller_Proto_S2M_ExitBattle,
        __Marshaller_Proto_M2S_ExitBattle);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.MatchServerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MatchServices</summary>
    [grpc::BindServiceMethod(typeof(MatchServices), "BindService")]
    public abstract partial class MatchServicesBase
    {
      /// <summary>
      ///创建匹配
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.M2S_CreateMatchGroup> CreateMatchGroup(global::Proto.S2M_CreateMatchGroup request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///开始启动战斗副本
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.M2S_StartMatch> StartMatch(global::Proto.S2M_StartMatch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///加入战斗
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.M2S_TryToReJoinMatch> TryToReJoinMatch(global::Proto.S2M_TryToReJoinMatch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///加入match
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.M2S_JoinMatchGroup> JoinMatchGroup(global::Proto.S2M_JoinMatchGroup request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///离开匹配
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.M2S_LeaveMatchGroup> LeaveMatchGroup(global::Proto.S2M_LeaveMatchGroup request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///finished
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.M2S_FinishBattle> FinishBattle(global::Proto.S2M_FinishBattle request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.M2S_KillUser> KllUser(global::Proto.S2M_KillUser request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///退出战斗
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.M2S_ExitBattle> ExitBattle(global::Proto.S2M_ExitBattle request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MatchServices</summary>
    public partial class MatchServicesClient : grpc::ClientBase<MatchServicesClient>
    {
      /// <summary>Creates a new client for MatchServices</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MatchServicesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MatchServices that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MatchServicesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MatchServicesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MatchServicesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///创建匹配
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_CreateMatchGroup CreateMatchGroup(global::Proto.S2M_CreateMatchGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMatchGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建匹配
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_CreateMatchGroup CreateMatchGroup(global::Proto.S2M_CreateMatchGroup request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMatchGroup, null, options, request);
      }
      /// <summary>
      ///创建匹配
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_CreateMatchGroup> CreateMatchGroupAsync(global::Proto.S2M_CreateMatchGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMatchGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建匹配
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_CreateMatchGroup> CreateMatchGroupAsync(global::Proto.S2M_CreateMatchGroup request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMatchGroup, null, options, request);
      }
      /// <summary>
      ///开始启动战斗副本
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_StartMatch StartMatch(global::Proto.S2M_StartMatch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartMatch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///开始启动战斗副本
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_StartMatch StartMatch(global::Proto.S2M_StartMatch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartMatch, null, options, request);
      }
      /// <summary>
      ///开始启动战斗副本
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_StartMatch> StartMatchAsync(global::Proto.S2M_StartMatch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartMatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///开始启动战斗副本
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_StartMatch> StartMatchAsync(global::Proto.S2M_StartMatch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartMatch, null, options, request);
      }
      /// <summary>
      ///加入战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_TryToReJoinMatch TryToReJoinMatch(global::Proto.S2M_TryToReJoinMatch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TryToReJoinMatch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///加入战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_TryToReJoinMatch TryToReJoinMatch(global::Proto.S2M_TryToReJoinMatch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TryToReJoinMatch, null, options, request);
      }
      /// <summary>
      ///加入战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_TryToReJoinMatch> TryToReJoinMatchAsync(global::Proto.S2M_TryToReJoinMatch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TryToReJoinMatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///加入战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_TryToReJoinMatch> TryToReJoinMatchAsync(global::Proto.S2M_TryToReJoinMatch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TryToReJoinMatch, null, options, request);
      }
      /// <summary>
      ///加入match
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_JoinMatchGroup JoinMatchGroup(global::Proto.S2M_JoinMatchGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinMatchGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///加入match
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_JoinMatchGroup JoinMatchGroup(global::Proto.S2M_JoinMatchGroup request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_JoinMatchGroup, null, options, request);
      }
      /// <summary>
      ///加入match
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_JoinMatchGroup> JoinMatchGroupAsync(global::Proto.S2M_JoinMatchGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinMatchGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///加入match
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_JoinMatchGroup> JoinMatchGroupAsync(global::Proto.S2M_JoinMatchGroup request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_JoinMatchGroup, null, options, request);
      }
      /// <summary>
      ///离开匹配
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_LeaveMatchGroup LeaveMatchGroup(global::Proto.S2M_LeaveMatchGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaveMatchGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///离开匹配
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_LeaveMatchGroup LeaveMatchGroup(global::Proto.S2M_LeaveMatchGroup request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LeaveMatchGroup, null, options, request);
      }
      /// <summary>
      ///离开匹配
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_LeaveMatchGroup> LeaveMatchGroupAsync(global::Proto.S2M_LeaveMatchGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaveMatchGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///离开匹配
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_LeaveMatchGroup> LeaveMatchGroupAsync(global::Proto.S2M_LeaveMatchGroup request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LeaveMatchGroup, null, options, request);
      }
      /// <summary>
      ///finished
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_FinishBattle FinishBattle(global::Proto.S2M_FinishBattle request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FinishBattle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///finished
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_FinishBattle FinishBattle(global::Proto.S2M_FinishBattle request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FinishBattle, null, options, request);
      }
      /// <summary>
      ///finished
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_FinishBattle> FinishBattleAsync(global::Proto.S2M_FinishBattle request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FinishBattleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///finished
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_FinishBattle> FinishBattleAsync(global::Proto.S2M_FinishBattle request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FinishBattle, null, options, request);
      }
      public virtual global::Proto.M2S_KillUser KllUser(global::Proto.S2M_KillUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KllUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.M2S_KillUser KllUser(global::Proto.S2M_KillUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KllUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_KillUser> KllUserAsync(global::Proto.S2M_KillUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KllUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_KillUser> KllUserAsync(global::Proto.S2M_KillUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KllUser, null, options, request);
      }
      /// <summary>
      ///退出战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_ExitBattle ExitBattle(global::Proto.S2M_ExitBattle request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExitBattle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///退出战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.M2S_ExitBattle ExitBattle(global::Proto.S2M_ExitBattle request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExitBattle, null, options, request);
      }
      /// <summary>
      ///退出战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_ExitBattle> ExitBattleAsync(global::Proto.S2M_ExitBattle request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExitBattleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///退出战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.M2S_ExitBattle> ExitBattleAsync(global::Proto.S2M_ExitBattle request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExitBattle, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MatchServicesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MatchServicesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MatchServicesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateMatchGroup, serviceImpl.CreateMatchGroup)
          .AddMethod(__Method_StartMatch, serviceImpl.StartMatch)
          .AddMethod(__Method_TryToReJoinMatch, serviceImpl.TryToReJoinMatch)
          .AddMethod(__Method_JoinMatchGroup, serviceImpl.JoinMatchGroup)
          .AddMethod(__Method_LeaveMatchGroup, serviceImpl.LeaveMatchGroup)
          .AddMethod(__Method_FinishBattle, serviceImpl.FinishBattle)
          .AddMethod(__Method_KllUser, serviceImpl.KllUser)
          .AddMethod(__Method_ExitBattle, serviceImpl.ExitBattle).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MatchServicesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateMatchGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.S2M_CreateMatchGroup, global::Proto.M2S_CreateMatchGroup>(serviceImpl.CreateMatchGroup));
      serviceBinder.AddMethod(__Method_StartMatch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.S2M_StartMatch, global::Proto.M2S_StartMatch>(serviceImpl.StartMatch));
      serviceBinder.AddMethod(__Method_TryToReJoinMatch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.S2M_TryToReJoinMatch, global::Proto.M2S_TryToReJoinMatch>(serviceImpl.TryToReJoinMatch));
      serviceBinder.AddMethod(__Method_JoinMatchGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.S2M_JoinMatchGroup, global::Proto.M2S_JoinMatchGroup>(serviceImpl.JoinMatchGroup));
      serviceBinder.AddMethod(__Method_LeaveMatchGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.S2M_LeaveMatchGroup, global::Proto.M2S_LeaveMatchGroup>(serviceImpl.LeaveMatchGroup));
      serviceBinder.AddMethod(__Method_FinishBattle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.S2M_FinishBattle, global::Proto.M2S_FinishBattle>(serviceImpl.FinishBattle));
      serviceBinder.AddMethod(__Method_KllUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.S2M_KillUser, global::Proto.M2S_KillUser>(serviceImpl.KllUser));
      serviceBinder.AddMethod(__Method_ExitBattle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.S2M_ExitBattle, global::Proto.M2S_ExitBattle>(serviceImpl.ExitBattle));
    }

  }
}
#endregion
