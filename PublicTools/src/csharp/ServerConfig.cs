// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: server_config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.ServerConfig {

  /// <summary>Holder for reflection information generated from server_config.proto</summary>
  public static partial class ServerConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for server_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNzZXJ2ZXJfY29uZmlnLnByb3RvEhJQcm90by5TZXJ2ZXJDb25maWcaCmRh",
            "dGEucHJvdG8iiAIKEUxvZ2luU2VydmVyQ29uZmlnEioKC1NlcnZpY3NIb3N0",
            "GAEgASgLMhUuUHJvdG8uU2VydmljZUFkZHJlc3MSKQoKTGlzdGVuSG9zdBgC",
            "IAEoCzIVLlByb3RvLlNlcnZpY2VBZGRyZXNzEg4KBkRCSG9zdBgDIAEoCRIO",
            "CgZEQk5hbWUYBCABKAkSCwoDTG9nGAUgASgIEhAKCFprU2VydmVyGAYgAygJ",
            "EhMKC0thZmthU2VydmVyGAkgAygJEhcKD0dhdGVTZXJ2ZXJzUm9vdBgKIAEo",
            "CRIXCg9Mb2dpblNlcnZlclJvb3QYCyABKAkSFgoOQ2hhdFNlcnZlclJvb3QY",
            "DSABKAki/AIKEEdhdGVTZXJ2ZXJDb25maWcSKQoKTGlzdGVuSG9zdBgBIAEo",
            "CzIVLlByb3RvLlNlcnZpY2VBZGRyZXNzEioKC1NlcnZpY3NIb3N0GAIgASgL",
            "MhUuUHJvdG8uU2VydmljZUFkZHJlc3MSEAoIWmtTZXJ2ZXIYBiADKAkSFwoP",
            "R2F0ZVNlcnZlcnNSb290GAcgASgJEhcKD0xvZ2luU2VydmVyUm9vdBgIIAEo",
            "CRIXCg9NYXRjaFNlcnZlclJvb3QYCSABKAkSGAoQTm90aWZ5U2VydmVyUm9v",
            "dBgKIAEoCRITCgtLYWZrYVNlcnZlchgLIAMoCRIRCglFeGNlbFJvb3QYDSAB",
            "KAkSDgoGREJIb3N0GBQgASgJEg4KBkRCTmFtZRgVIAEoCRIQCghTZXJ2ZXJJ",
            "RBgWIAEoBRILCgNMb2cYFyABKAgSEAoIRW5hYmxlR00YGCABKAgSDgoGUGxh",
            "eWVyGBkgASgFEhEKCU1heFBsYXllchgaIAEoBSKmAgoSQmF0dGxlU2VydmVy",
            "Q29uZmlnEg0KBUxldmVsGAEgASgFEikKCkxpc3Rlbkhvc3QYAiABKAsyFS5Q",
            "cm90by5TZXJ2aWNlQWRkcmVzcxIQCghaa1NlcnZlchgEIAMoCRIqCgtTZXJ2",
            "aWNzSG9zdBgGIAEoCzIVLlByb3RvLlNlcnZpY2VBZGRyZXNzEhMKC0thZmth",
            "U2VydmVyGAcgAygJEhcKD0xvZ2luU2VydmVyUm9vdBgIIAEoCRIXCg9NYXRj",
            "aFNlcnZlclJvb3QYCSABKAkSEgoKQ29uZmlnUm9vdBgQIAEoCRIYChBCYXR0",
            "bGVTZXJ2ZXJSb290GBEgASgJEhEKCU1heFBsYXllchgSIAEoBRIQCghTZXJ2",
            "ZXJJRBgTIAEoCSKaAgoQQ2hhdFNlcnZlckNvbmZpZxIUCgxDaGF0U2VydmVy",
            "SUQYASABKAUSKQoKTGlzdGVuSG9zdBgCIAEoCzIVLlByb3RvLlNlcnZpY2VB",
            "ZGRyZXNzEioKC1NlcnZpY3NIb3N0GAMgASgLMhUuUHJvdG8uU2VydmljZUFk",
            "ZHJlc3MSFwoPTG9naW5TZXJ2ZXJSb290GAQgASgJEg4KBkRCSG9zdBgFIAEo",
            "CRIOCgZEQk5hbWUYBiABKAkSDgoGUGxheWVyGAcgASgFEhEKCU1heFBsYXll",
            "chgIIAEoBRITCgtLYWZrYVNlcnZlchgJIAMoCRIQCghaa1NlcnZlchgKIAMo",
            "CRIWCg5DaGF0U2VydmVyUm9vdBgLIAEoCSK5AQoSTm90aWZ5U2VydmVyQ29u",
            "ZmlnEioKC1NlcnZpY3NIb3N0GAEgASgLMhUuUHJvdG8uU2VydmljZUFkZHJl",
            "c3MSDgoGREJIb3N0GAIgASgJEg4KBkRCTmFtZRgDIAEoCRITCgtLYWZrYVNl",
            "cnZlchgJIAMoCRIQCghaa1NlcnZlchgKIAMoCRIWCg5DaGF0U2VydmVyUm9v",
            "dBgLIAEoCRIYChBOb3RpZnlTZXJ2ZXJSb290GAwgASgJItMBChFNYXRjaFNl",
            "cnZlckNvbmZpZxIqCgtTZXJ2aWNzSG9zdBgBIAEoCzIVLlByb3RvLlNlcnZp",
            "Y2VBZGRyZXNzEg4KBkRCSG9zdBgCIAEoCRIOCgZEQk5hbWUYAyABKAkSEwoL",
            "S2Fma2FTZXJ2ZXIYCSADKAkSEAoIWmtTZXJ2ZXIYCiADKAkSGAoQTm90aWZ5",
            "U2VydmVyUm9vdBgLIAEoCRIYChBCYXR0bGVTZXJ2ZXJSb290GAwgASgJEhcK",
            "D01hdGNoU2VydmVyUm9vdBgNIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.DataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ServerConfig.LoginServerConfig), global::Proto.ServerConfig.LoginServerConfig.Parser, new[]{ "ServicsHost", "ListenHost", "DBHost", "DBName", "Log", "ZkServer", "KafkaServer", "GateServersRoot", "LoginServerRoot", "ChatServerRoot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ServerConfig.GateServerConfig), global::Proto.ServerConfig.GateServerConfig.Parser, new[]{ "ListenHost", "ServicsHost", "ZkServer", "GateServersRoot", "LoginServerRoot", "MatchServerRoot", "NotifyServerRoot", "KafkaServer", "ExcelRoot", "DBHost", "DBName", "ServerID", "Log", "EnableGM", "Player", "MaxPlayer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ServerConfig.BattleServerConfig), global::Proto.ServerConfig.BattleServerConfig.Parser, new[]{ "Level", "ListenHost", "ZkServer", "ServicsHost", "KafkaServer", "LoginServerRoot", "MatchServerRoot", "ConfigRoot", "BattleServerRoot", "MaxPlayer", "ServerID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ServerConfig.ChatServerConfig), global::Proto.ServerConfig.ChatServerConfig.Parser, new[]{ "ChatServerID", "ListenHost", "ServicsHost", "LoginServerRoot", "DBHost", "DBName", "Player", "MaxPlayer", "KafkaServer", "ZkServer", "ChatServerRoot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ServerConfig.NotifyServerConfig), global::Proto.ServerConfig.NotifyServerConfig.Parser, new[]{ "ServicsHost", "DBHost", "DBName", "KafkaServer", "ZkServer", "ChatServerRoot", "NotifyServerRoot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ServerConfig.MatchServerConfig), global::Proto.ServerConfig.MatchServerConfig.Parser, new[]{ "ServicsHost", "DBHost", "DBName", "KafkaServer", "ZkServer", "NotifyServerRoot", "BattleServerRoot", "MatchServerRoot" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///登陆认证服务器
  /// </summary>
  public sealed partial class LoginServerConfig : pb::IMessage<LoginServerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoginServerConfig> _parser = new pb::MessageParser<LoginServerConfig>(() => new LoginServerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ServerConfig.ServerConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginServerConfig(LoginServerConfig other) : this() {
      servicsHost_ = other.servicsHost_ != null ? other.servicsHost_.Clone() : null;
      listenHost_ = other.listenHost_ != null ? other.listenHost_.Clone() : null;
      dBHost_ = other.dBHost_;
      dBName_ = other.dBName_;
      log_ = other.log_;
      zkServer_ = other.zkServer_.Clone();
      kafkaServer_ = other.kafkaServer_.Clone();
      gateServersRoot_ = other.gateServersRoot_;
      loginServerRoot_ = other.loginServerRoot_;
      chatServerRoot_ = other.chatServerRoot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginServerConfig Clone() {
      return new LoginServerConfig(this);
    }

    /// <summary>Field number for the "ServicsHost" field.</summary>
    public const int ServicsHostFieldNumber = 1;
    private global::Proto.ServiceAddress servicsHost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ServiceAddress ServicsHost {
      get { return servicsHost_; }
      set {
        servicsHost_ = value;
      }
    }

    /// <summary>Field number for the "ListenHost" field.</summary>
    public const int ListenHostFieldNumber = 2;
    private global::Proto.ServiceAddress listenHost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ServiceAddress ListenHost {
      get { return listenHost_; }
      set {
        listenHost_ = value;
      }
    }

    /// <summary>Field number for the "DBHost" field.</summary>
    public const int DBHostFieldNumber = 3;
    private string dBHost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DBHost {
      get { return dBHost_; }
      set {
        dBHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DBName" field.</summary>
    public const int DBNameFieldNumber = 4;
    private string dBName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DBName {
      get { return dBName_; }
      set {
        dBName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Log" field.</summary>
    public const int LogFieldNumber = 5;
    private bool log_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Log {
      get { return log_; }
      set {
        log_ = value;
      }
    }

    /// <summary>Field number for the "ZkServer" field.</summary>
    public const int ZkServerFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_zkServer_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> zkServer_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///zk servers 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ZkServer {
      get { return zkServer_; }
    }

    /// <summary>Field number for the "KafkaServer" field.</summary>
    public const int KafkaServerFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_kafkaServer_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> kafkaServer_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///kafka
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> KafkaServer {
      get { return kafkaServer_; }
    }

    /// <summary>Field number for the "GateServersRoot" field.</summary>
    public const int GateServersRootFieldNumber = 10;
    private string gateServersRoot_ = "";
    /// <summary>
    ///gate Server list 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GateServersRoot {
      get { return gateServersRoot_; }
      set {
        gateServersRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoginServerRoot" field.</summary>
    public const int LoginServerRootFieldNumber = 11;
    private string loginServerRoot_ = "";
    /// <summary>
    ///login server list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginServerRoot {
      get { return loginServerRoot_; }
      set {
        loginServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ChatServerRoot" field.</summary>
    public const int ChatServerRootFieldNumber = 13;
    private string chatServerRoot_ = "";
    /// <summary>
    ///chat server list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatServerRoot {
      get { return chatServerRoot_; }
      set {
        chatServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServicsHost, other.ServicsHost)) return false;
      if (!object.Equals(ListenHost, other.ListenHost)) return false;
      if (DBHost != other.DBHost) return false;
      if (DBName != other.DBName) return false;
      if (Log != other.Log) return false;
      if(!zkServer_.Equals(other.zkServer_)) return false;
      if(!kafkaServer_.Equals(other.kafkaServer_)) return false;
      if (GateServersRoot != other.GateServersRoot) return false;
      if (LoginServerRoot != other.LoginServerRoot) return false;
      if (ChatServerRoot != other.ChatServerRoot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (servicsHost_ != null) hash ^= ServicsHost.GetHashCode();
      if (listenHost_ != null) hash ^= ListenHost.GetHashCode();
      if (DBHost.Length != 0) hash ^= DBHost.GetHashCode();
      if (DBName.Length != 0) hash ^= DBName.GetHashCode();
      if (Log != false) hash ^= Log.GetHashCode();
      hash ^= zkServer_.GetHashCode();
      hash ^= kafkaServer_.GetHashCode();
      if (GateServersRoot.Length != 0) hash ^= GateServersRoot.GetHashCode();
      if (LoginServerRoot.Length != 0) hash ^= LoginServerRoot.GetHashCode();
      if (ChatServerRoot.Length != 0) hash ^= ChatServerRoot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (servicsHost_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServicsHost);
      }
      if (listenHost_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ListenHost);
      }
      if (DBHost.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DBHost);
      }
      if (DBName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DBName);
      }
      if (Log != false) {
        output.WriteRawTag(40);
        output.WriteBool(Log);
      }
      zkServer_.WriteTo(output, _repeated_zkServer_codec);
      kafkaServer_.WriteTo(output, _repeated_kafkaServer_codec);
      if (GateServersRoot.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GateServersRoot);
      }
      if (LoginServerRoot.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LoginServerRoot);
      }
      if (ChatServerRoot.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ChatServerRoot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (servicsHost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServicsHost);
      }
      if (listenHost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListenHost);
      }
      if (DBHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBHost);
      }
      if (DBName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBName);
      }
      if (Log != false) {
        size += 1 + 1;
      }
      size += zkServer_.CalculateSize(_repeated_zkServer_codec);
      size += kafkaServer_.CalculateSize(_repeated_kafkaServer_codec);
      if (GateServersRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GateServersRoot);
      }
      if (LoginServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginServerRoot);
      }
      if (ChatServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatServerRoot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.servicsHost_ != null) {
        if (servicsHost_ == null) {
          ServicsHost = new global::Proto.ServiceAddress();
        }
        ServicsHost.MergeFrom(other.ServicsHost);
      }
      if (other.listenHost_ != null) {
        if (listenHost_ == null) {
          ListenHost = new global::Proto.ServiceAddress();
        }
        ListenHost.MergeFrom(other.ListenHost);
      }
      if (other.DBHost.Length != 0) {
        DBHost = other.DBHost;
      }
      if (other.DBName.Length != 0) {
        DBName = other.DBName;
      }
      if (other.Log != false) {
        Log = other.Log;
      }
      zkServer_.Add(other.zkServer_);
      kafkaServer_.Add(other.kafkaServer_);
      if (other.GateServersRoot.Length != 0) {
        GateServersRoot = other.GateServersRoot;
      }
      if (other.LoginServerRoot.Length != 0) {
        LoginServerRoot = other.LoginServerRoot;
      }
      if (other.ChatServerRoot.Length != 0) {
        ChatServerRoot = other.ChatServerRoot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (servicsHost_ == null) {
              ServicsHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ServicsHost);
            break;
          }
          case 18: {
            if (listenHost_ == null) {
              ListenHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ListenHost);
            break;
          }
          case 26: {
            DBHost = input.ReadString();
            break;
          }
          case 34: {
            DBName = input.ReadString();
            break;
          }
          case 40: {
            Log = input.ReadBool();
            break;
          }
          case 50: {
            zkServer_.AddEntriesFrom(input, _repeated_zkServer_codec);
            break;
          }
          case 74: {
            kafkaServer_.AddEntriesFrom(input, _repeated_kafkaServer_codec);
            break;
          }
          case 82: {
            GateServersRoot = input.ReadString();
            break;
          }
          case 90: {
            LoginServerRoot = input.ReadString();
            break;
          }
          case 106: {
            ChatServerRoot = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (servicsHost_ == null) {
              ServicsHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ServicsHost);
            break;
          }
          case 18: {
            if (listenHost_ == null) {
              ListenHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ListenHost);
            break;
          }
          case 26: {
            DBHost = input.ReadString();
            break;
          }
          case 34: {
            DBName = input.ReadString();
            break;
          }
          case 40: {
            Log = input.ReadBool();
            break;
          }
          case 50: {
            zkServer_.AddEntriesFrom(ref input, _repeated_zkServer_codec);
            break;
          }
          case 74: {
            kafkaServer_.AddEntriesFrom(ref input, _repeated_kafkaServer_codec);
            break;
          }
          case 82: {
            GateServersRoot = input.ReadString();
            break;
          }
          case 90: {
            LoginServerRoot = input.ReadString();
            break;
          }
          case 106: {
            ChatServerRoot = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///用户服务器
  /// </summary>
  public sealed partial class GateServerConfig : pb::IMessage<GateServerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GateServerConfig> _parser = new pb::MessageParser<GateServerConfig>(() => new GateServerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GateServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ServerConfig.ServerConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateServerConfig(GateServerConfig other) : this() {
      listenHost_ = other.listenHost_ != null ? other.listenHost_.Clone() : null;
      servicsHost_ = other.servicsHost_ != null ? other.servicsHost_.Clone() : null;
      zkServer_ = other.zkServer_.Clone();
      gateServersRoot_ = other.gateServersRoot_;
      loginServerRoot_ = other.loginServerRoot_;
      matchServerRoot_ = other.matchServerRoot_;
      notifyServerRoot_ = other.notifyServerRoot_;
      kafkaServer_ = other.kafkaServer_.Clone();
      excelRoot_ = other.excelRoot_;
      dBHost_ = other.dBHost_;
      dBName_ = other.dBName_;
      serverID_ = other.serverID_;
      log_ = other.log_;
      enableGM_ = other.enableGM_;
      player_ = other.player_;
      maxPlayer_ = other.maxPlayer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateServerConfig Clone() {
      return new GateServerConfig(this);
    }

    /// <summary>Field number for the "ListenHost" field.</summary>
    public const int ListenHostFieldNumber = 1;
    private global::Proto.ServiceAddress listenHost_;
    /// <summary>
    ///for user 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ServiceAddress ListenHost {
      get { return listenHost_; }
      set {
        listenHost_ = value;
      }
    }

    /// <summary>Field number for the "ServicsHost" field.</summary>
    public const int ServicsHostFieldNumber = 2;
    private global::Proto.ServiceAddress servicsHost_;
    /// <summary>
    ///for services
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ServiceAddress ServicsHost {
      get { return servicsHost_; }
      set {
        servicsHost_ = value;
      }
    }

    /// <summary>Field number for the "ZkServer" field.</summary>
    public const int ZkServerFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_zkServer_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> zkServer_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///zk servers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ZkServer {
      get { return zkServer_; }
    }

    /// <summary>Field number for the "GateServersRoot" field.</summary>
    public const int GateServersRootFieldNumber = 7;
    private string gateServersRoot_ = "";
    /// <summary>
    ///gate Server list 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GateServersRoot {
      get { return gateServersRoot_; }
      set {
        gateServersRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoginServerRoot" field.</summary>
    public const int LoginServerRootFieldNumber = 8;
    private string loginServerRoot_ = "";
    /// <summary>
    ///login server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginServerRoot {
      get { return loginServerRoot_; }
      set {
        loginServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MatchServerRoot" field.</summary>
    public const int MatchServerRootFieldNumber = 9;
    private string matchServerRoot_ = "";
    /// <summary>
    ///match server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchServerRoot {
      get { return matchServerRoot_; }
      set {
        matchServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NotifyServerRoot" field.</summary>
    public const int NotifyServerRootFieldNumber = 10;
    private string notifyServerRoot_ = "";
    /// <summary>
    ///notify server root
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NotifyServerRoot {
      get { return notifyServerRoot_; }
      set {
        notifyServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KafkaServer" field.</summary>
    public const int KafkaServerFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_kafkaServer_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> kafkaServer_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///kafka
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> KafkaServer {
      get { return kafkaServer_; }
    }

    /// <summary>Field number for the "ExcelRoot" field.</summary>
    public const int ExcelRootFieldNumber = 13;
    private string excelRoot_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExcelRoot {
      get { return excelRoot_; }
      set {
        excelRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DBHost" field.</summary>
    public const int DBHostFieldNumber = 20;
    private string dBHost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DBHost {
      get { return dBHost_; }
      set {
        dBHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DBName" field.</summary>
    public const int DBNameFieldNumber = 21;
    private string dBName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DBName {
      get { return dBName_; }
      set {
        dBName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerID" field.</summary>
    public const int ServerIDFieldNumber = 22;
    private int serverID_;
    /// <summary>
    ///gate serverid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerID {
      get { return serverID_; }
      set {
        serverID_ = value;
      }
    }

    /// <summary>Field number for the "Log" field.</summary>
    public const int LogFieldNumber = 23;
    private bool log_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Log {
      get { return log_; }
      set {
        log_ = value;
      }
    }

    /// <summary>Field number for the "EnableGM" field.</summary>
    public const int EnableGMFieldNumber = 24;
    private bool enableGM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableGM {
      get { return enableGM_; }
      set {
        enableGM_ = value;
      }
    }

    /// <summary>Field number for the "Player" field.</summary>
    public const int PlayerFieldNumber = 25;
    private int player_;
    /// <summary>
    ///5分钟上传允许用户数小规模超载 双分流策越
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "MaxPlayer" field.</summary>
    public const int MaxPlayerFieldNumber = 26;
    private int maxPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GateServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GateServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ListenHost, other.ListenHost)) return false;
      if (!object.Equals(ServicsHost, other.ServicsHost)) return false;
      if(!zkServer_.Equals(other.zkServer_)) return false;
      if (GateServersRoot != other.GateServersRoot) return false;
      if (LoginServerRoot != other.LoginServerRoot) return false;
      if (MatchServerRoot != other.MatchServerRoot) return false;
      if (NotifyServerRoot != other.NotifyServerRoot) return false;
      if(!kafkaServer_.Equals(other.kafkaServer_)) return false;
      if (ExcelRoot != other.ExcelRoot) return false;
      if (DBHost != other.DBHost) return false;
      if (DBName != other.DBName) return false;
      if (ServerID != other.ServerID) return false;
      if (Log != other.Log) return false;
      if (EnableGM != other.EnableGM) return false;
      if (Player != other.Player) return false;
      if (MaxPlayer != other.MaxPlayer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (listenHost_ != null) hash ^= ListenHost.GetHashCode();
      if (servicsHost_ != null) hash ^= ServicsHost.GetHashCode();
      hash ^= zkServer_.GetHashCode();
      if (GateServersRoot.Length != 0) hash ^= GateServersRoot.GetHashCode();
      if (LoginServerRoot.Length != 0) hash ^= LoginServerRoot.GetHashCode();
      if (MatchServerRoot.Length != 0) hash ^= MatchServerRoot.GetHashCode();
      if (NotifyServerRoot.Length != 0) hash ^= NotifyServerRoot.GetHashCode();
      hash ^= kafkaServer_.GetHashCode();
      if (ExcelRoot.Length != 0) hash ^= ExcelRoot.GetHashCode();
      if (DBHost.Length != 0) hash ^= DBHost.GetHashCode();
      if (DBName.Length != 0) hash ^= DBName.GetHashCode();
      if (ServerID != 0) hash ^= ServerID.GetHashCode();
      if (Log != false) hash ^= Log.GetHashCode();
      if (EnableGM != false) hash ^= EnableGM.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (listenHost_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ListenHost);
      }
      if (servicsHost_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ServicsHost);
      }
      zkServer_.WriteTo(output, _repeated_zkServer_codec);
      if (GateServersRoot.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GateServersRoot);
      }
      if (LoginServerRoot.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LoginServerRoot);
      }
      if (MatchServerRoot.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(MatchServerRoot);
      }
      if (NotifyServerRoot.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(NotifyServerRoot);
      }
      kafkaServer_.WriteTo(output, _repeated_kafkaServer_codec);
      if (ExcelRoot.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ExcelRoot);
      }
      if (DBHost.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(DBHost);
      }
      if (DBName.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(DBName);
      }
      if (ServerID != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ServerID);
      }
      if (Log != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(Log);
      }
      if (EnableGM != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(EnableGM);
      }
      if (Player != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Player);
      }
      if (MaxPlayer != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(MaxPlayer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (listenHost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListenHost);
      }
      if (servicsHost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServicsHost);
      }
      size += zkServer_.CalculateSize(_repeated_zkServer_codec);
      if (GateServersRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GateServersRoot);
      }
      if (LoginServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginServerRoot);
      }
      if (MatchServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchServerRoot);
      }
      if (NotifyServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NotifyServerRoot);
      }
      size += kafkaServer_.CalculateSize(_repeated_kafkaServer_codec);
      if (ExcelRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExcelRoot);
      }
      if (DBHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DBHost);
      }
      if (DBName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DBName);
      }
      if (ServerID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
      }
      if (Log != false) {
        size += 2 + 1;
      }
      if (EnableGM != false) {
        size += 2 + 1;
      }
      if (Player != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Player);
      }
      if (MaxPlayer != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GateServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.listenHost_ != null) {
        if (listenHost_ == null) {
          ListenHost = new global::Proto.ServiceAddress();
        }
        ListenHost.MergeFrom(other.ListenHost);
      }
      if (other.servicsHost_ != null) {
        if (servicsHost_ == null) {
          ServicsHost = new global::Proto.ServiceAddress();
        }
        ServicsHost.MergeFrom(other.ServicsHost);
      }
      zkServer_.Add(other.zkServer_);
      if (other.GateServersRoot.Length != 0) {
        GateServersRoot = other.GateServersRoot;
      }
      if (other.LoginServerRoot.Length != 0) {
        LoginServerRoot = other.LoginServerRoot;
      }
      if (other.MatchServerRoot.Length != 0) {
        MatchServerRoot = other.MatchServerRoot;
      }
      if (other.NotifyServerRoot.Length != 0) {
        NotifyServerRoot = other.NotifyServerRoot;
      }
      kafkaServer_.Add(other.kafkaServer_);
      if (other.ExcelRoot.Length != 0) {
        ExcelRoot = other.ExcelRoot;
      }
      if (other.DBHost.Length != 0) {
        DBHost = other.DBHost;
      }
      if (other.DBName.Length != 0) {
        DBName = other.DBName;
      }
      if (other.ServerID != 0) {
        ServerID = other.ServerID;
      }
      if (other.Log != false) {
        Log = other.Log;
      }
      if (other.EnableGM != false) {
        EnableGM = other.EnableGM;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.MaxPlayer != 0) {
        MaxPlayer = other.MaxPlayer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (listenHost_ == null) {
              ListenHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ListenHost);
            break;
          }
          case 18: {
            if (servicsHost_ == null) {
              ServicsHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ServicsHost);
            break;
          }
          case 50: {
            zkServer_.AddEntriesFrom(input, _repeated_zkServer_codec);
            break;
          }
          case 58: {
            GateServersRoot = input.ReadString();
            break;
          }
          case 66: {
            LoginServerRoot = input.ReadString();
            break;
          }
          case 74: {
            MatchServerRoot = input.ReadString();
            break;
          }
          case 82: {
            NotifyServerRoot = input.ReadString();
            break;
          }
          case 90: {
            kafkaServer_.AddEntriesFrom(input, _repeated_kafkaServer_codec);
            break;
          }
          case 106: {
            ExcelRoot = input.ReadString();
            break;
          }
          case 162: {
            DBHost = input.ReadString();
            break;
          }
          case 170: {
            DBName = input.ReadString();
            break;
          }
          case 176: {
            ServerID = input.ReadInt32();
            break;
          }
          case 184: {
            Log = input.ReadBool();
            break;
          }
          case 192: {
            EnableGM = input.ReadBool();
            break;
          }
          case 200: {
            Player = input.ReadInt32();
            break;
          }
          case 208: {
            MaxPlayer = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (listenHost_ == null) {
              ListenHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ListenHost);
            break;
          }
          case 18: {
            if (servicsHost_ == null) {
              ServicsHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ServicsHost);
            break;
          }
          case 50: {
            zkServer_.AddEntriesFrom(ref input, _repeated_zkServer_codec);
            break;
          }
          case 58: {
            GateServersRoot = input.ReadString();
            break;
          }
          case 66: {
            LoginServerRoot = input.ReadString();
            break;
          }
          case 74: {
            MatchServerRoot = input.ReadString();
            break;
          }
          case 82: {
            NotifyServerRoot = input.ReadString();
            break;
          }
          case 90: {
            kafkaServer_.AddEntriesFrom(ref input, _repeated_kafkaServer_codec);
            break;
          }
          case 106: {
            ExcelRoot = input.ReadString();
            break;
          }
          case 162: {
            DBHost = input.ReadString();
            break;
          }
          case 170: {
            DBName = input.ReadString();
            break;
          }
          case 176: {
            ServerID = input.ReadInt32();
            break;
          }
          case 184: {
            Log = input.ReadBool();
            break;
          }
          case 192: {
            EnableGM = input.ReadBool();
            break;
          }
          case 200: {
            Player = input.ReadInt32();
            break;
          }
          case 208: {
            MaxPlayer = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///战斗服务器
  /// </summary>
  public sealed partial class BattleServerConfig : pb::IMessage<BattleServerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BattleServerConfig> _parser = new pb::MessageParser<BattleServerConfig>(() => new BattleServerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ServerConfig.ServerConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleServerConfig(BattleServerConfig other) : this() {
      level_ = other.level_;
      listenHost_ = other.listenHost_ != null ? other.listenHost_.Clone() : null;
      zkServer_ = other.zkServer_.Clone();
      servicsHost_ = other.servicsHost_ != null ? other.servicsHost_.Clone() : null;
      kafkaServer_ = other.kafkaServer_.Clone();
      loginServerRoot_ = other.loginServerRoot_;
      matchServerRoot_ = other.matchServerRoot_;
      configRoot_ = other.configRoot_;
      battleServerRoot_ = other.battleServerRoot_;
      maxPlayer_ = other.maxPlayer_;
      serverID_ = other.serverID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleServerConfig Clone() {
      return new BattleServerConfig(this);
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    /// <summary>
    ///config of map 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "ListenHost" field.</summary>
    public const int ListenHostFieldNumber = 2;
    private global::Proto.ServiceAddress listenHost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ServiceAddress ListenHost {
      get { return listenHost_; }
      set {
        listenHost_ = value;
      }
    }

    /// <summary>Field number for the "ZkServer" field.</summary>
    public const int ZkServerFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_zkServer_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> zkServer_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///zk servers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ZkServer {
      get { return zkServer_; }
    }

    /// <summary>Field number for the "ServicsHost" field.</summary>
    public const int ServicsHostFieldNumber = 6;
    private global::Proto.ServiceAddress servicsHost_;
    /// <summary>
    ///innner services
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ServiceAddress ServicsHost {
      get { return servicsHost_; }
      set {
        servicsHost_ = value;
      }
    }

    /// <summary>Field number for the "KafkaServer" field.</summary>
    public const int KafkaServerFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_kafkaServer_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> kafkaServer_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///kafka
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> KafkaServer {
      get { return kafkaServer_; }
    }

    /// <summary>Field number for the "LoginServerRoot" field.</summary>
    public const int LoginServerRootFieldNumber = 8;
    private string loginServerRoot_ = "";
    /// <summary>
    ///login server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginServerRoot {
      get { return loginServerRoot_; }
      set {
        loginServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MatchServerRoot" field.</summary>
    public const int MatchServerRootFieldNumber = 9;
    private string matchServerRoot_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchServerRoot {
      get { return matchServerRoot_; }
      set {
        matchServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConfigRoot" field.</summary>
    public const int ConfigRootFieldNumber = 16;
    private string configRoot_ = "";
    /// <summary>
    ///configs 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigRoot {
      get { return configRoot_; }
      set {
        configRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BattleServerRoot" field.</summary>
    public const int BattleServerRootFieldNumber = 17;
    private string battleServerRoot_ = "";
    /// <summary>
    ///zk battle 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleServerRoot {
      get { return battleServerRoot_; }
      set {
        battleServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaxPlayer" field.</summary>
    public const int MaxPlayerFieldNumber = 18;
    private int maxPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    /// <summary>Field number for the "ServerID" field.</summary>
    public const int ServerIDFieldNumber = 19;
    private string serverID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerID {
      get { return serverID_; }
      set {
        serverID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (!object.Equals(ListenHost, other.ListenHost)) return false;
      if(!zkServer_.Equals(other.zkServer_)) return false;
      if (!object.Equals(ServicsHost, other.ServicsHost)) return false;
      if(!kafkaServer_.Equals(other.kafkaServer_)) return false;
      if (LoginServerRoot != other.LoginServerRoot) return false;
      if (MatchServerRoot != other.MatchServerRoot) return false;
      if (ConfigRoot != other.ConfigRoot) return false;
      if (BattleServerRoot != other.BattleServerRoot) return false;
      if (MaxPlayer != other.MaxPlayer) return false;
      if (ServerID != other.ServerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (listenHost_ != null) hash ^= ListenHost.GetHashCode();
      hash ^= zkServer_.GetHashCode();
      if (servicsHost_ != null) hash ^= ServicsHost.GetHashCode();
      hash ^= kafkaServer_.GetHashCode();
      if (LoginServerRoot.Length != 0) hash ^= LoginServerRoot.GetHashCode();
      if (MatchServerRoot.Length != 0) hash ^= MatchServerRoot.GetHashCode();
      if (ConfigRoot.Length != 0) hash ^= ConfigRoot.GetHashCode();
      if (BattleServerRoot.Length != 0) hash ^= BattleServerRoot.GetHashCode();
      if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
      if (ServerID.Length != 0) hash ^= ServerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (listenHost_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ListenHost);
      }
      zkServer_.WriteTo(output, _repeated_zkServer_codec);
      if (servicsHost_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ServicsHost);
      }
      kafkaServer_.WriteTo(output, _repeated_kafkaServer_codec);
      if (LoginServerRoot.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LoginServerRoot);
      }
      if (MatchServerRoot.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(MatchServerRoot);
      }
      if (ConfigRoot.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ConfigRoot);
      }
      if (BattleServerRoot.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(BattleServerRoot);
      }
      if (MaxPlayer != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MaxPlayer);
      }
      if (ServerID.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ServerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (listenHost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListenHost);
      }
      size += zkServer_.CalculateSize(_repeated_zkServer_codec);
      if (servicsHost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServicsHost);
      }
      size += kafkaServer_.CalculateSize(_repeated_kafkaServer_codec);
      if (LoginServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginServerRoot);
      }
      if (MatchServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchServerRoot);
      }
      if (ConfigRoot.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ConfigRoot);
      }
      if (BattleServerRoot.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BattleServerRoot);
      }
      if (MaxPlayer != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayer);
      }
      if (ServerID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ServerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.listenHost_ != null) {
        if (listenHost_ == null) {
          ListenHost = new global::Proto.ServiceAddress();
        }
        ListenHost.MergeFrom(other.ListenHost);
      }
      zkServer_.Add(other.zkServer_);
      if (other.servicsHost_ != null) {
        if (servicsHost_ == null) {
          ServicsHost = new global::Proto.ServiceAddress();
        }
        ServicsHost.MergeFrom(other.ServicsHost);
      }
      kafkaServer_.Add(other.kafkaServer_);
      if (other.LoginServerRoot.Length != 0) {
        LoginServerRoot = other.LoginServerRoot;
      }
      if (other.MatchServerRoot.Length != 0) {
        MatchServerRoot = other.MatchServerRoot;
      }
      if (other.ConfigRoot.Length != 0) {
        ConfigRoot = other.ConfigRoot;
      }
      if (other.BattleServerRoot.Length != 0) {
        BattleServerRoot = other.BattleServerRoot;
      }
      if (other.MaxPlayer != 0) {
        MaxPlayer = other.MaxPlayer;
      }
      if (other.ServerID.Length != 0) {
        ServerID = other.ServerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 18: {
            if (listenHost_ == null) {
              ListenHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ListenHost);
            break;
          }
          case 34: {
            zkServer_.AddEntriesFrom(input, _repeated_zkServer_codec);
            break;
          }
          case 50: {
            if (servicsHost_ == null) {
              ServicsHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ServicsHost);
            break;
          }
          case 58: {
            kafkaServer_.AddEntriesFrom(input, _repeated_kafkaServer_codec);
            break;
          }
          case 66: {
            LoginServerRoot = input.ReadString();
            break;
          }
          case 74: {
            MatchServerRoot = input.ReadString();
            break;
          }
          case 130: {
            ConfigRoot = input.ReadString();
            break;
          }
          case 138: {
            BattleServerRoot = input.ReadString();
            break;
          }
          case 144: {
            MaxPlayer = input.ReadInt32();
            break;
          }
          case 154: {
            ServerID = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 18: {
            if (listenHost_ == null) {
              ListenHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ListenHost);
            break;
          }
          case 34: {
            zkServer_.AddEntriesFrom(ref input, _repeated_zkServer_codec);
            break;
          }
          case 50: {
            if (servicsHost_ == null) {
              ServicsHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ServicsHost);
            break;
          }
          case 58: {
            kafkaServer_.AddEntriesFrom(ref input, _repeated_kafkaServer_codec);
            break;
          }
          case 66: {
            LoginServerRoot = input.ReadString();
            break;
          }
          case 74: {
            MatchServerRoot = input.ReadString();
            break;
          }
          case 130: {
            ConfigRoot = input.ReadString();
            break;
          }
          case 138: {
            BattleServerRoot = input.ReadString();
            break;
          }
          case 144: {
            MaxPlayer = input.ReadInt32();
            break;
          }
          case 154: {
            ServerID = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChatServerConfig : pb::IMessage<ChatServerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChatServerConfig> _parser = new pb::MessageParser<ChatServerConfig>(() => new ChatServerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ServerConfig.ServerConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatServerConfig(ChatServerConfig other) : this() {
      chatServerID_ = other.chatServerID_;
      listenHost_ = other.listenHost_ != null ? other.listenHost_.Clone() : null;
      servicsHost_ = other.servicsHost_ != null ? other.servicsHost_.Clone() : null;
      loginServerRoot_ = other.loginServerRoot_;
      dBHost_ = other.dBHost_;
      dBName_ = other.dBName_;
      player_ = other.player_;
      maxPlayer_ = other.maxPlayer_;
      kafkaServer_ = other.kafkaServer_.Clone();
      zkServer_ = other.zkServer_.Clone();
      chatServerRoot_ = other.chatServerRoot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatServerConfig Clone() {
      return new ChatServerConfig(this);
    }

    /// <summary>Field number for the "ChatServerID" field.</summary>
    public const int ChatServerIDFieldNumber = 1;
    private int chatServerID_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChatServerID {
      get { return chatServerID_; }
      set {
        chatServerID_ = value;
      }
    }

    /// <summary>Field number for the "ListenHost" field.</summary>
    public const int ListenHostFieldNumber = 2;
    private global::Proto.ServiceAddress listenHost_;
    /// <summary>
    ///对外服务端口 2200+
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ServiceAddress ListenHost {
      get { return listenHost_; }
      set {
        listenHost_ = value;
      }
    }

    /// <summary>Field number for the "ServicsHost" field.</summary>
    public const int ServicsHostFieldNumber = 3;
    private global::Proto.ServiceAddress servicsHost_;
    /// <summary>
    ///对内服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ServiceAddress ServicsHost {
      get { return servicsHost_; }
      set {
        servicsHost_ = value;
      }
    }

    /// <summary>Field number for the "LoginServerRoot" field.</summary>
    public const int LoginServerRootFieldNumber = 4;
    private string loginServerRoot_ = "";
    /// <summary>
    ///login server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginServerRoot {
      get { return loginServerRoot_; }
      set {
        loginServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DBHost" field.</summary>
    public const int DBHostFieldNumber = 5;
    private string dBHost_ = "";
    /// <summary>
    ///数据库地址 monogo
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DBHost {
      get { return dBHost_; }
      set {
        dBHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DBName" field.</summary>
    public const int DBNameFieldNumber = 6;
    private string dBName_ = "";
    /// <summary>
    ///collection name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DBName {
      get { return dBName_; }
      set {
        dBName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Player" field.</summary>
    public const int PlayerFieldNumber = 7;
    private int player_;
    /// <summary>
    ///当前用户数 5分钟上传变更
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "MaxPlayer" field.</summary>
    public const int MaxPlayerFieldNumber = 8;
    private int maxPlayer_;
    /// <summary>
    ///最大承载用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    /// <summary>Field number for the "KafkaServer" field.</summary>
    public const int KafkaServerFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_kafkaServer_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> kafkaServer_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///kafka
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> KafkaServer {
      get { return kafkaServer_; }
    }

    /// <summary>Field number for the "ZkServer" field.</summary>
    public const int ZkServerFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_zkServer_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> zkServer_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///zk servers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ZkServer {
      get { return zkServer_; }
    }

    /// <summary>Field number for the "ChatServerRoot" field.</summary>
    public const int ChatServerRootFieldNumber = 11;
    private string chatServerRoot_ = "";
    /// <summary>
    ///zk 目录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatServerRoot {
      get { return chatServerRoot_; }
      set {
        chatServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatServerID != other.ChatServerID) return false;
      if (!object.Equals(ListenHost, other.ListenHost)) return false;
      if (!object.Equals(ServicsHost, other.ServicsHost)) return false;
      if (LoginServerRoot != other.LoginServerRoot) return false;
      if (DBHost != other.DBHost) return false;
      if (DBName != other.DBName) return false;
      if (Player != other.Player) return false;
      if (MaxPlayer != other.MaxPlayer) return false;
      if(!kafkaServer_.Equals(other.kafkaServer_)) return false;
      if(!zkServer_.Equals(other.zkServer_)) return false;
      if (ChatServerRoot != other.ChatServerRoot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatServerID != 0) hash ^= ChatServerID.GetHashCode();
      if (listenHost_ != null) hash ^= ListenHost.GetHashCode();
      if (servicsHost_ != null) hash ^= ServicsHost.GetHashCode();
      if (LoginServerRoot.Length != 0) hash ^= LoginServerRoot.GetHashCode();
      if (DBHost.Length != 0) hash ^= DBHost.GetHashCode();
      if (DBName.Length != 0) hash ^= DBName.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
      hash ^= kafkaServer_.GetHashCode();
      hash ^= zkServer_.GetHashCode();
      if (ChatServerRoot.Length != 0) hash ^= ChatServerRoot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatServerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChatServerID);
      }
      if (listenHost_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ListenHost);
      }
      if (servicsHost_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ServicsHost);
      }
      if (LoginServerRoot.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LoginServerRoot);
      }
      if (DBHost.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DBHost);
      }
      if (DBName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DBName);
      }
      if (Player != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Player);
      }
      if (MaxPlayer != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MaxPlayer);
      }
      kafkaServer_.WriteTo(output, _repeated_kafkaServer_codec);
      zkServer_.WriteTo(output, _repeated_zkServer_codec);
      if (ChatServerRoot.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ChatServerRoot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChatServerID);
      }
      if (listenHost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListenHost);
      }
      if (servicsHost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServicsHost);
      }
      if (LoginServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginServerRoot);
      }
      if (DBHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBHost);
      }
      if (DBName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBName);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
      }
      if (MaxPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayer);
      }
      size += kafkaServer_.CalculateSize(_repeated_kafkaServer_codec);
      size += zkServer_.CalculateSize(_repeated_zkServer_codec);
      if (ChatServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatServerRoot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.ChatServerID != 0) {
        ChatServerID = other.ChatServerID;
      }
      if (other.listenHost_ != null) {
        if (listenHost_ == null) {
          ListenHost = new global::Proto.ServiceAddress();
        }
        ListenHost.MergeFrom(other.ListenHost);
      }
      if (other.servicsHost_ != null) {
        if (servicsHost_ == null) {
          ServicsHost = new global::Proto.ServiceAddress();
        }
        ServicsHost.MergeFrom(other.ServicsHost);
      }
      if (other.LoginServerRoot.Length != 0) {
        LoginServerRoot = other.LoginServerRoot;
      }
      if (other.DBHost.Length != 0) {
        DBHost = other.DBHost;
      }
      if (other.DBName.Length != 0) {
        DBName = other.DBName;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.MaxPlayer != 0) {
        MaxPlayer = other.MaxPlayer;
      }
      kafkaServer_.Add(other.kafkaServer_);
      zkServer_.Add(other.zkServer_);
      if (other.ChatServerRoot.Length != 0) {
        ChatServerRoot = other.ChatServerRoot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChatServerID = input.ReadInt32();
            break;
          }
          case 18: {
            if (listenHost_ == null) {
              ListenHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ListenHost);
            break;
          }
          case 26: {
            if (servicsHost_ == null) {
              ServicsHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ServicsHost);
            break;
          }
          case 34: {
            LoginServerRoot = input.ReadString();
            break;
          }
          case 42: {
            DBHost = input.ReadString();
            break;
          }
          case 50: {
            DBName = input.ReadString();
            break;
          }
          case 56: {
            Player = input.ReadInt32();
            break;
          }
          case 64: {
            MaxPlayer = input.ReadInt32();
            break;
          }
          case 74: {
            kafkaServer_.AddEntriesFrom(input, _repeated_kafkaServer_codec);
            break;
          }
          case 82: {
            zkServer_.AddEntriesFrom(input, _repeated_zkServer_codec);
            break;
          }
          case 90: {
            ChatServerRoot = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChatServerID = input.ReadInt32();
            break;
          }
          case 18: {
            if (listenHost_ == null) {
              ListenHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ListenHost);
            break;
          }
          case 26: {
            if (servicsHost_ == null) {
              ServicsHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ServicsHost);
            break;
          }
          case 34: {
            LoginServerRoot = input.ReadString();
            break;
          }
          case 42: {
            DBHost = input.ReadString();
            break;
          }
          case 50: {
            DBName = input.ReadString();
            break;
          }
          case 56: {
            Player = input.ReadInt32();
            break;
          }
          case 64: {
            MaxPlayer = input.ReadInt32();
            break;
          }
          case 74: {
            kafkaServer_.AddEntriesFrom(ref input, _repeated_kafkaServer_codec);
            break;
          }
          case 82: {
            zkServer_.AddEntriesFrom(ref input, _repeated_zkServer_codec);
            break;
          }
          case 90: {
            ChatServerRoot = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///通知服务器
  /// </summary>
  public sealed partial class NotifyServerConfig : pb::IMessage<NotifyServerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotifyServerConfig> _parser = new pb::MessageParser<NotifyServerConfig>(() => new NotifyServerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ServerConfig.ServerConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyServerConfig(NotifyServerConfig other) : this() {
      servicsHost_ = other.servicsHost_ != null ? other.servicsHost_.Clone() : null;
      dBHost_ = other.dBHost_;
      dBName_ = other.dBName_;
      kafkaServer_ = other.kafkaServer_.Clone();
      zkServer_ = other.zkServer_.Clone();
      chatServerRoot_ = other.chatServerRoot_;
      notifyServerRoot_ = other.notifyServerRoot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyServerConfig Clone() {
      return new NotifyServerConfig(this);
    }

    /// <summary>Field number for the "ServicsHost" field.</summary>
    public const int ServicsHostFieldNumber = 1;
    private global::Proto.ServiceAddress servicsHost_;
    /// <summary>
    ///对内服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ServiceAddress ServicsHost {
      get { return servicsHost_; }
      set {
        servicsHost_ = value;
      }
    }

    /// <summary>Field number for the "DBHost" field.</summary>
    public const int DBHostFieldNumber = 2;
    private string dBHost_ = "";
    /// <summary>
    ///数据库地址 monogo
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DBHost {
      get { return dBHost_; }
      set {
        dBHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DBName" field.</summary>
    public const int DBNameFieldNumber = 3;
    private string dBName_ = "";
    /// <summary>
    ///collection name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DBName {
      get { return dBName_; }
      set {
        dBName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KafkaServer" field.</summary>
    public const int KafkaServerFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_kafkaServer_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> kafkaServer_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///kafka
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> KafkaServer {
      get { return kafkaServer_; }
    }

    /// <summary>Field number for the "ZkServer" field.</summary>
    public const int ZkServerFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_zkServer_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> zkServer_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///zk servers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ZkServer {
      get { return zkServer_; }
    }

    /// <summary>Field number for the "ChatServerRoot" field.</summary>
    public const int ChatServerRootFieldNumber = 11;
    private string chatServerRoot_ = "";
    /// <summary>
    ///zk 目录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatServerRoot {
      get { return chatServerRoot_; }
      set {
        chatServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NotifyServerRoot" field.</summary>
    public const int NotifyServerRootFieldNumber = 12;
    private string notifyServerRoot_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NotifyServerRoot {
      get { return notifyServerRoot_; }
      set {
        notifyServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServicsHost, other.ServicsHost)) return false;
      if (DBHost != other.DBHost) return false;
      if (DBName != other.DBName) return false;
      if(!kafkaServer_.Equals(other.kafkaServer_)) return false;
      if(!zkServer_.Equals(other.zkServer_)) return false;
      if (ChatServerRoot != other.ChatServerRoot) return false;
      if (NotifyServerRoot != other.NotifyServerRoot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (servicsHost_ != null) hash ^= ServicsHost.GetHashCode();
      if (DBHost.Length != 0) hash ^= DBHost.GetHashCode();
      if (DBName.Length != 0) hash ^= DBName.GetHashCode();
      hash ^= kafkaServer_.GetHashCode();
      hash ^= zkServer_.GetHashCode();
      if (ChatServerRoot.Length != 0) hash ^= ChatServerRoot.GetHashCode();
      if (NotifyServerRoot.Length != 0) hash ^= NotifyServerRoot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (servicsHost_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServicsHost);
      }
      if (DBHost.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DBHost);
      }
      if (DBName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DBName);
      }
      kafkaServer_.WriteTo(output, _repeated_kafkaServer_codec);
      zkServer_.WriteTo(output, _repeated_zkServer_codec);
      if (ChatServerRoot.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ChatServerRoot);
      }
      if (NotifyServerRoot.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(NotifyServerRoot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (servicsHost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServicsHost);
      }
      if (DBHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBHost);
      }
      if (DBName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBName);
      }
      size += kafkaServer_.CalculateSize(_repeated_kafkaServer_codec);
      size += zkServer_.CalculateSize(_repeated_zkServer_codec);
      if (ChatServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatServerRoot);
      }
      if (NotifyServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NotifyServerRoot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.servicsHost_ != null) {
        if (servicsHost_ == null) {
          ServicsHost = new global::Proto.ServiceAddress();
        }
        ServicsHost.MergeFrom(other.ServicsHost);
      }
      if (other.DBHost.Length != 0) {
        DBHost = other.DBHost;
      }
      if (other.DBName.Length != 0) {
        DBName = other.DBName;
      }
      kafkaServer_.Add(other.kafkaServer_);
      zkServer_.Add(other.zkServer_);
      if (other.ChatServerRoot.Length != 0) {
        ChatServerRoot = other.ChatServerRoot;
      }
      if (other.NotifyServerRoot.Length != 0) {
        NotifyServerRoot = other.NotifyServerRoot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (servicsHost_ == null) {
              ServicsHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ServicsHost);
            break;
          }
          case 18: {
            DBHost = input.ReadString();
            break;
          }
          case 26: {
            DBName = input.ReadString();
            break;
          }
          case 74: {
            kafkaServer_.AddEntriesFrom(input, _repeated_kafkaServer_codec);
            break;
          }
          case 82: {
            zkServer_.AddEntriesFrom(input, _repeated_zkServer_codec);
            break;
          }
          case 90: {
            ChatServerRoot = input.ReadString();
            break;
          }
          case 98: {
            NotifyServerRoot = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (servicsHost_ == null) {
              ServicsHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ServicsHost);
            break;
          }
          case 18: {
            DBHost = input.ReadString();
            break;
          }
          case 26: {
            DBName = input.ReadString();
            break;
          }
          case 74: {
            kafkaServer_.AddEntriesFrom(ref input, _repeated_kafkaServer_codec);
            break;
          }
          case 82: {
            zkServer_.AddEntriesFrom(ref input, _repeated_zkServer_codec);
            break;
          }
          case 90: {
            ChatServerRoot = input.ReadString();
            break;
          }
          case 98: {
            NotifyServerRoot = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///配对服务器
  /// </summary>
  public sealed partial class MatchServerConfig : pb::IMessage<MatchServerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchServerConfig> _parser = new pb::MessageParser<MatchServerConfig>(() => new MatchServerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ServerConfig.ServerConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchServerConfig(MatchServerConfig other) : this() {
      servicsHost_ = other.servicsHost_ != null ? other.servicsHost_.Clone() : null;
      dBHost_ = other.dBHost_;
      dBName_ = other.dBName_;
      kafkaServer_ = other.kafkaServer_.Clone();
      zkServer_ = other.zkServer_.Clone();
      notifyServerRoot_ = other.notifyServerRoot_;
      battleServerRoot_ = other.battleServerRoot_;
      matchServerRoot_ = other.matchServerRoot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchServerConfig Clone() {
      return new MatchServerConfig(this);
    }

    /// <summary>Field number for the "ServicsHost" field.</summary>
    public const int ServicsHostFieldNumber = 1;
    private global::Proto.ServiceAddress servicsHost_;
    /// <summary>
    ///对内服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ServiceAddress ServicsHost {
      get { return servicsHost_; }
      set {
        servicsHost_ = value;
      }
    }

    /// <summary>Field number for the "DBHost" field.</summary>
    public const int DBHostFieldNumber = 2;
    private string dBHost_ = "";
    /// <summary>
    ///数据库地址 monogo
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DBHost {
      get { return dBHost_; }
      set {
        dBHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DBName" field.</summary>
    public const int DBNameFieldNumber = 3;
    private string dBName_ = "";
    /// <summary>
    ///collection name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DBName {
      get { return dBName_; }
      set {
        dBName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KafkaServer" field.</summary>
    public const int KafkaServerFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_kafkaServer_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> kafkaServer_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///kafka
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> KafkaServer {
      get { return kafkaServer_; }
    }

    /// <summary>Field number for the "ZkServer" field.</summary>
    public const int ZkServerFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_zkServer_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> zkServer_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///zk servers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ZkServer {
      get { return zkServer_; }
    }

    /// <summary>Field number for the "NotifyServerRoot" field.</summary>
    public const int NotifyServerRootFieldNumber = 11;
    private string notifyServerRoot_ = "";
    /// <summary>
    ///对内服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NotifyServerRoot {
      get { return notifyServerRoot_; }
      set {
        notifyServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BattleServerRoot" field.</summary>
    public const int BattleServerRootFieldNumber = 12;
    private string battleServerRoot_ = "";
    /// <summary>
    ///battle server list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleServerRoot {
      get { return battleServerRoot_; }
      set {
        battleServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MatchServerRoot" field.</summary>
    public const int MatchServerRootFieldNumber = 13;
    private string matchServerRoot_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchServerRoot {
      get { return matchServerRoot_; }
      set {
        matchServerRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServicsHost, other.ServicsHost)) return false;
      if (DBHost != other.DBHost) return false;
      if (DBName != other.DBName) return false;
      if(!kafkaServer_.Equals(other.kafkaServer_)) return false;
      if(!zkServer_.Equals(other.zkServer_)) return false;
      if (NotifyServerRoot != other.NotifyServerRoot) return false;
      if (BattleServerRoot != other.BattleServerRoot) return false;
      if (MatchServerRoot != other.MatchServerRoot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (servicsHost_ != null) hash ^= ServicsHost.GetHashCode();
      if (DBHost.Length != 0) hash ^= DBHost.GetHashCode();
      if (DBName.Length != 0) hash ^= DBName.GetHashCode();
      hash ^= kafkaServer_.GetHashCode();
      hash ^= zkServer_.GetHashCode();
      if (NotifyServerRoot.Length != 0) hash ^= NotifyServerRoot.GetHashCode();
      if (BattleServerRoot.Length != 0) hash ^= BattleServerRoot.GetHashCode();
      if (MatchServerRoot.Length != 0) hash ^= MatchServerRoot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (servicsHost_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServicsHost);
      }
      if (DBHost.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DBHost);
      }
      if (DBName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DBName);
      }
      kafkaServer_.WriteTo(output, _repeated_kafkaServer_codec);
      zkServer_.WriteTo(output, _repeated_zkServer_codec);
      if (NotifyServerRoot.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(NotifyServerRoot);
      }
      if (BattleServerRoot.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(BattleServerRoot);
      }
      if (MatchServerRoot.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(MatchServerRoot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (servicsHost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServicsHost);
      }
      if (DBHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBHost);
      }
      if (DBName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBName);
      }
      size += kafkaServer_.CalculateSize(_repeated_kafkaServer_codec);
      size += zkServer_.CalculateSize(_repeated_zkServer_codec);
      if (NotifyServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NotifyServerRoot);
      }
      if (BattleServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleServerRoot);
      }
      if (MatchServerRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchServerRoot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.servicsHost_ != null) {
        if (servicsHost_ == null) {
          ServicsHost = new global::Proto.ServiceAddress();
        }
        ServicsHost.MergeFrom(other.ServicsHost);
      }
      if (other.DBHost.Length != 0) {
        DBHost = other.DBHost;
      }
      if (other.DBName.Length != 0) {
        DBName = other.DBName;
      }
      kafkaServer_.Add(other.kafkaServer_);
      zkServer_.Add(other.zkServer_);
      if (other.NotifyServerRoot.Length != 0) {
        NotifyServerRoot = other.NotifyServerRoot;
      }
      if (other.BattleServerRoot.Length != 0) {
        BattleServerRoot = other.BattleServerRoot;
      }
      if (other.MatchServerRoot.Length != 0) {
        MatchServerRoot = other.MatchServerRoot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (servicsHost_ == null) {
              ServicsHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ServicsHost);
            break;
          }
          case 18: {
            DBHost = input.ReadString();
            break;
          }
          case 26: {
            DBName = input.ReadString();
            break;
          }
          case 74: {
            kafkaServer_.AddEntriesFrom(input, _repeated_kafkaServer_codec);
            break;
          }
          case 82: {
            zkServer_.AddEntriesFrom(input, _repeated_zkServer_codec);
            break;
          }
          case 90: {
            NotifyServerRoot = input.ReadString();
            break;
          }
          case 98: {
            BattleServerRoot = input.ReadString();
            break;
          }
          case 106: {
            MatchServerRoot = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (servicsHost_ == null) {
              ServicsHost = new global::Proto.ServiceAddress();
            }
            input.ReadMessage(ServicsHost);
            break;
          }
          case 18: {
            DBHost = input.ReadString();
            break;
          }
          case 26: {
            DBName = input.ReadString();
            break;
          }
          case 74: {
            kafkaServer_.AddEntriesFrom(ref input, _repeated_kafkaServer_codec);
            break;
          }
          case 82: {
            zkServer_.AddEntriesFrom(ref input, _repeated_zkServer_codec);
            break;
          }
          case 90: {
            NotifyServerRoot = input.ReadString();
            break;
          }
          case 98: {
            BattleServerRoot = input.ReadString();
            break;
          }
          case 106: {
            MatchServerRoot = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
