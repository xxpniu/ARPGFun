// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: battle_server.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Proto {
  /// <summary>
  ///战斗对外服务器
  /// </summary>
  public static partial class BattleServerService
  {
    static readonly string __ServiceName = "Proto.BattleServerService";

    static readonly grpc::Marshaller<global::Proto.C2B_ExitBattle> __Marshaller_Proto_C2B_ExitBattle = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.C2B_ExitBattle.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.B2C_ExitBattle> __Marshaller_Proto_B2C_ExitBattle = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.B2C_ExitBattle.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.C2B_JoinBattle> __Marshaller_Proto_C2B_JoinBattle = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.C2B_JoinBattle.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.B2C_JoinBattle> __Marshaller_Proto_B2C_JoinBattle = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.B2C_JoinBattle.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.C2B_ViewPlayerHero> __Marshaller_Proto_C2B_ViewPlayerHero = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.C2B_ViewPlayerHero.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.B2C_ViewPlayerHero> __Marshaller_Proto_B2C_ViewPlayerHero = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.B2C_ViewPlayerHero.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Any> __Marshaller_google_protobuf_Any = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Any.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.C2B_ExitBattle, global::Proto.B2C_ExitBattle> __Method_ExitBattle = new grpc::Method<global::Proto.C2B_ExitBattle, global::Proto.B2C_ExitBattle>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExitBattle",
        __Marshaller_Proto_C2B_ExitBattle,
        __Marshaller_Proto_B2C_ExitBattle);

    static readonly grpc::Method<global::Proto.C2B_JoinBattle, global::Proto.B2C_JoinBattle> __Method_JoinBattle = new grpc::Method<global::Proto.C2B_JoinBattle, global::Proto.B2C_JoinBattle>(
        grpc::MethodType.Unary,
        __ServiceName,
        "JoinBattle",
        __Marshaller_Proto_C2B_JoinBattle,
        __Marshaller_Proto_B2C_JoinBattle);

    static readonly grpc::Method<global::Proto.C2B_ViewPlayerHero, global::Proto.B2C_ViewPlayerHero> __Method_ViewPlayerHero = new grpc::Method<global::Proto.C2B_ViewPlayerHero, global::Proto.B2C_ViewPlayerHero>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ViewPlayerHero",
        __Marshaller_Proto_C2B_ViewPlayerHero,
        __Marshaller_Proto_B2C_ViewPlayerHero);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Any, global::Google.Protobuf.WellKnownTypes.Any> __Method_BattleChannel = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Any, global::Google.Protobuf.WellKnownTypes.Any>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "BattleChannel",
        __Marshaller_google_protobuf_Any,
        __Marshaller_google_protobuf_Any);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.BattleServerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BattleServerService</summary>
    [grpc::BindServiceMethod(typeof(BattleServerService), "BindService")]
    public abstract partial class BattleServerServiceBase
    {
      /// <summary>
      ///退出战斗
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.B2C_ExitBattle> ExitBattle(global::Proto.C2B_ExitBattle request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///加入战斗
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.B2C_JoinBattle> JoinBattle(global::Proto.C2B_JoinBattle request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查看英雄信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.B2C_ViewPlayerHero> ViewPlayerHero(global::Proto.C2B_ViewPlayerHero request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///解决
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task BattleChannel(grpc::IAsyncStreamReader<global::Google.Protobuf.WellKnownTypes.Any> requestStream, grpc::IServerStreamWriter<global::Google.Protobuf.WellKnownTypes.Any> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BattleServerService</summary>
    public partial class BattleServerServiceClient : grpc::ClientBase<BattleServerServiceClient>
    {
      /// <summary>Creates a new client for BattleServerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BattleServerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BattleServerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BattleServerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BattleServerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BattleServerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///退出战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.B2C_ExitBattle ExitBattle(global::Proto.C2B_ExitBattle request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExitBattle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///退出战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.B2C_ExitBattle ExitBattle(global::Proto.C2B_ExitBattle request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExitBattle, null, options, request);
      }
      /// <summary>
      ///退出战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.B2C_ExitBattle> ExitBattleAsync(global::Proto.C2B_ExitBattle request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExitBattleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///退出战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.B2C_ExitBattle> ExitBattleAsync(global::Proto.C2B_ExitBattle request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExitBattle, null, options, request);
      }
      /// <summary>
      ///加入战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.B2C_JoinBattle JoinBattle(global::Proto.C2B_JoinBattle request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinBattle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///加入战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.B2C_JoinBattle JoinBattle(global::Proto.C2B_JoinBattle request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_JoinBattle, null, options, request);
      }
      /// <summary>
      ///加入战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.B2C_JoinBattle> JoinBattleAsync(global::Proto.C2B_JoinBattle request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinBattleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///加入战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.B2C_JoinBattle> JoinBattleAsync(global::Proto.C2B_JoinBattle request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_JoinBattle, null, options, request);
      }
      /// <summary>
      ///查看英雄信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.B2C_ViewPlayerHero ViewPlayerHero(global::Proto.C2B_ViewPlayerHero request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ViewPlayerHero(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查看英雄信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.B2C_ViewPlayerHero ViewPlayerHero(global::Proto.C2B_ViewPlayerHero request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ViewPlayerHero, null, options, request);
      }
      /// <summary>
      ///查看英雄信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.B2C_ViewPlayerHero> ViewPlayerHeroAsync(global::Proto.C2B_ViewPlayerHero request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ViewPlayerHeroAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查看英雄信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.B2C_ViewPlayerHero> ViewPlayerHeroAsync(global::Proto.C2B_ViewPlayerHero request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ViewPlayerHero, null, options, request);
      }
      /// <summary>
      ///解决
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Protobuf.WellKnownTypes.Any, global::Google.Protobuf.WellKnownTypes.Any> BattleChannel(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BattleChannel(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///解决
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Protobuf.WellKnownTypes.Any, global::Google.Protobuf.WellKnownTypes.Any> BattleChannel(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_BattleChannel, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BattleServerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BattleServerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BattleServerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ExitBattle, serviceImpl.ExitBattle)
          .AddMethod(__Method_JoinBattle, serviceImpl.JoinBattle)
          .AddMethod(__Method_ViewPlayerHero, serviceImpl.ViewPlayerHero)
          .AddMethod(__Method_BattleChannel, serviceImpl.BattleChannel).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BattleServerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ExitBattle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.C2B_ExitBattle, global::Proto.B2C_ExitBattle>(serviceImpl.ExitBattle));
      serviceBinder.AddMethod(__Method_JoinBattle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.C2B_JoinBattle, global::Proto.B2C_JoinBattle>(serviceImpl.JoinBattle));
      serviceBinder.AddMethod(__Method_ViewPlayerHero, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.C2B_ViewPlayerHero, global::Proto.B2C_ViewPlayerHero>(serviceImpl.ViewPlayerHero));
      serviceBinder.AddMethod(__Method_BattleChannel, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Any, global::Google.Protobuf.WellKnownTypes.Any>(serviceImpl.BattleChannel));
    }

  }
  /// <summary>
  ///开始战斗
  /// </summary>
  public static partial class BattleInnerServices
  {
    static readonly string __ServiceName = "Proto.BattleInnerServices";

    static readonly grpc::Marshaller<global::Proto.M2B_StartBattle> __Marshaller_Proto_M2B_StartBattle = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.M2B_StartBattle.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.B2M_StartBattle> __Marshaller_Proto_B2M_StartBattle = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.B2M_StartBattle.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.M2B_KillUser> __Marshaller_Proto_M2B_KillUser = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.M2B_KillUser.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.B2M_KillUer> __Marshaller_Proto_B2M_KillUer = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.B2M_KillUer.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.M2B_StartBattle, global::Proto.B2M_StartBattle> __Method_StartBatle = new grpc::Method<global::Proto.M2B_StartBattle, global::Proto.B2M_StartBattle>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartBatle",
        __Marshaller_Proto_M2B_StartBattle,
        __Marshaller_Proto_B2M_StartBattle);

    static readonly grpc::Method<global::Proto.M2B_KillUser, global::Proto.B2M_KillUer> __Method_KillUser = new grpc::Method<global::Proto.M2B_KillUser, global::Proto.B2M_KillUer>(
        grpc::MethodType.Unary,
        __ServiceName,
        "KillUser",
        __Marshaller_Proto_M2B_KillUser,
        __Marshaller_Proto_B2M_KillUer);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.BattleServerReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of BattleInnerServices</summary>
    [grpc::BindServiceMethod(typeof(BattleInnerServices), "BindService")]
    public abstract partial class BattleInnerServicesBase
    {
      /// <summary>
      ///请求开始战斗
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.B2M_StartBattle> StartBatle(global::Proto.M2B_StartBattle request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///killuser
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.B2M_KillUer> KillUser(global::Proto.M2B_KillUser request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BattleInnerServices</summary>
    public partial class BattleInnerServicesClient : grpc::ClientBase<BattleInnerServicesClient>
    {
      /// <summary>Creates a new client for BattleInnerServices</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BattleInnerServicesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BattleInnerServices that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BattleInnerServicesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BattleInnerServicesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BattleInnerServicesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///请求开始战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.B2M_StartBattle StartBatle(global::Proto.M2B_StartBattle request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartBatle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///请求开始战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.B2M_StartBattle StartBatle(global::Proto.M2B_StartBattle request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartBatle, null, options, request);
      }
      /// <summary>
      ///请求开始战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.B2M_StartBattle> StartBatleAsync(global::Proto.M2B_StartBattle request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartBatleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///请求开始战斗
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.B2M_StartBattle> StartBatleAsync(global::Proto.M2B_StartBattle request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartBatle, null, options, request);
      }
      /// <summary>
      ///killuser
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.B2M_KillUer KillUser(global::Proto.M2B_KillUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KillUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///killuser
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.B2M_KillUer KillUser(global::Proto.M2B_KillUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KillUser, null, options, request);
      }
      /// <summary>
      ///killuser
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.B2M_KillUer> KillUserAsync(global::Proto.M2B_KillUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KillUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///killuser
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.B2M_KillUer> KillUserAsync(global::Proto.M2B_KillUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KillUser, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BattleInnerServicesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BattleInnerServicesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BattleInnerServicesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StartBatle, serviceImpl.StartBatle)
          .AddMethod(__Method_KillUser, serviceImpl.KillUser).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BattleInnerServicesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_StartBatle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.M2B_StartBattle, global::Proto.B2M_StartBattle>(serviceImpl.StartBatle));
      serviceBinder.AddMethod(__Method_KillUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.M2B_KillUser, global::Proto.B2M_KillUer>(serviceImpl.KillUser));
    }

  }
}
#endregion
