// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: data.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Proto {
  public static partial class ServerStreamService
  {
    static readonly string __ServiceName = "Proto.ServerStreamService";

    static readonly grpc::Marshaller<global::Proto.Void> __Marshaller_Proto_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Void.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Any> __Marshaller_google_protobuf_Any = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Any.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.Void, global::Google.Protobuf.WellKnownTypes.Any> __Method_ServerAnyStream = new grpc::Method<global::Proto.Void, global::Google.Protobuf.WellKnownTypes.Any>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ServerAnyStream",
        __Marshaller_Proto_Void,
        __Marshaller_google_protobuf_Any);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Any, global::Proto.Void> __Method_ClentAnyStream = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Any, global::Proto.Void>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "ClentAnyStream",
        __Marshaller_google_protobuf_Any,
        __Marshaller_Proto_Void);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.DataReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ServerStreamService</summary>
    [grpc::BindServiceMethod(typeof(ServerStreamService), "BindService")]
    public abstract partial class ServerStreamServiceBase
    {
      public virtual global::System.Threading.Tasks.Task ServerAnyStream(global::Proto.Void request, grpc::IServerStreamWriter<global::Google.Protobuf.WellKnownTypes.Any> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.Void> ClentAnyStream(grpc::IAsyncStreamReader<global::Google.Protobuf.WellKnownTypes.Any> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ServerStreamService</summary>
    public partial class ServerStreamServiceClient : grpc::ClientBase<ServerStreamServiceClient>
    {
      /// <summary>Creates a new client for ServerStreamService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ServerStreamServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ServerStreamService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ServerStreamServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ServerStreamServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ServerStreamServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Google.Protobuf.WellKnownTypes.Any> ServerAnyStream(global::Proto.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerAnyStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Google.Protobuf.WellKnownTypes.Any> ServerAnyStream(global::Proto.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ServerAnyStream, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Google.Protobuf.WellKnownTypes.Any, global::Proto.Void> ClentAnyStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClentAnyStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Google.Protobuf.WellKnownTypes.Any, global::Proto.Void> ClentAnyStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_ClentAnyStream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ServerStreamServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ServerStreamServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ServerStreamServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ServerAnyStream, serviceImpl.ServerAnyStream)
          .AddMethod(__Method_ClentAnyStream, serviceImpl.ClentAnyStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ServerStreamServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ServerAnyStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Proto.Void, global::Google.Protobuf.WellKnownTypes.Any>(serviceImpl.ServerAnyStream));
      serviceBinder.AddMethod(__Method_ClentAnyStream, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Any, global::Proto.Void>(serviceImpl.ClentAnyStream));
    }

  }
}
#endregion
