// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: chat_server.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Proto {
  public static partial class ChatService
  {
    static readonly string __ServiceName = "Proto.ChatService";

    static readonly grpc::Marshaller<global::Proto.C2CH_Chat> __Marshaller_Proto_C2CH_Chat = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.C2CH_Chat.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.CH2C_Chat> __Marshaller_Proto_CH2C_Chat = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.CH2C_Chat.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.C2CH_QueryPlayerState> __Marshaller_Proto_C2CH_QueryPlayerState = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.C2CH_QueryPlayerState.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.CH2C_QueryPlayerState> __Marshaller_Proto_CH2C_QueryPlayerState = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.CH2C_QueryPlayerState.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.C2CH_Login> __Marshaller_Proto_C2CH_Login = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.C2CH_Login.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Any> __Marshaller_google_protobuf_Any = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Any.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.C2CH_LinkFriend> __Marshaller_Proto_C2CH_LinkFriend = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.C2CH_LinkFriend.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.CH2C_LinkFriend> __Marshaller_Proto_CH2C_LinkFriend = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.CH2C_LinkFriend.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.C2CH_UnLinkFriend> __Marshaller_Proto_C2CH_UnLinkFriend = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.C2CH_UnLinkFriend.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.CH2C_UnLinkFriend> __Marshaller_Proto_CH2C_UnLinkFriend = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.CH2C_UnLinkFriend.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Void> __Marshaller_Proto_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Void.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.CH2C_QueryFriend> __Marshaller_Proto_CH2C_QueryFriend = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.CH2C_QueryFriend.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.C2CH_Chat, global::Proto.CH2C_Chat> __Method_SendChat = new grpc::Method<global::Proto.C2CH_Chat, global::Proto.CH2C_Chat>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendChat",
        __Marshaller_Proto_C2CH_Chat,
        __Marshaller_Proto_CH2C_Chat);

    static readonly grpc::Method<global::Proto.C2CH_QueryPlayerState, global::Proto.CH2C_QueryPlayerState> __Method_QueryPlayerState = new grpc::Method<global::Proto.C2CH_QueryPlayerState, global::Proto.CH2C_QueryPlayerState>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryPlayerState",
        __Marshaller_Proto_C2CH_QueryPlayerState,
        __Marshaller_Proto_CH2C_QueryPlayerState);

    static readonly grpc::Method<global::Proto.C2CH_Login, global::Google.Protobuf.WellKnownTypes.Any> __Method_Login = new grpc::Method<global::Proto.C2CH_Login, global::Google.Protobuf.WellKnownTypes.Any>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Login",
        __Marshaller_Proto_C2CH_Login,
        __Marshaller_google_protobuf_Any);

    static readonly grpc::Method<global::Proto.C2CH_LinkFriend, global::Proto.CH2C_LinkFriend> __Method_LinkFrind = new grpc::Method<global::Proto.C2CH_LinkFriend, global::Proto.CH2C_LinkFriend>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LinkFrind",
        __Marshaller_Proto_C2CH_LinkFriend,
        __Marshaller_Proto_CH2C_LinkFriend);

    static readonly grpc::Method<global::Proto.C2CH_UnLinkFriend, global::Proto.CH2C_UnLinkFriend> __Method_UnLinkFrind = new grpc::Method<global::Proto.C2CH_UnLinkFriend, global::Proto.CH2C_UnLinkFriend>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnLinkFrind",
        __Marshaller_Proto_C2CH_UnLinkFriend,
        __Marshaller_Proto_CH2C_UnLinkFriend);

    static readonly grpc::Method<global::Proto.Void, global::Proto.CH2C_QueryFriend> __Method_QueryFriend = new grpc::Method<global::Proto.Void, global::Proto.CH2C_QueryFriend>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryFriend",
        __Marshaller_Proto_Void,
        __Marshaller_Proto_CH2C_QueryFriend);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.ChatServerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ChatService</summary>
    [grpc::BindServiceMethod(typeof(ChatService), "BindService")]
    public abstract partial class ChatServiceBase
    {
      /// <summary>
      ///聊天流 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.CH2C_Chat> SendChat(global::Proto.C2CH_Chat request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///玩家状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.CH2C_QueryPlayerState> QueryPlayerState(global::Proto.C2CH_QueryPlayerState request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///push message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Login(global::Proto.C2CH_Login request, grpc::IServerStreamWriter<global::Google.Protobuf.WellKnownTypes.Any> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///添加好友
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.CH2C_LinkFriend> LinkFrind(global::Proto.C2CH_LinkFriend request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除好友
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.CH2C_UnLinkFriend> UnLinkFrind(global::Proto.C2CH_UnLinkFriend request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///当前好友
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.CH2C_QueryFriend> QueryFriend(global::Proto.Void request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ChatService</summary>
    public partial class ChatServiceClient : grpc::ClientBase<ChatServiceClient>
    {
      /// <summary>Creates a new client for ChatService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ChatServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ChatService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ChatServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ChatServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ChatServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///聊天流 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CH2C_Chat SendChat(global::Proto.C2CH_Chat request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendChat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///聊天流 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CH2C_Chat SendChat(global::Proto.C2CH_Chat request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendChat, null, options, request);
      }
      /// <summary>
      ///聊天流 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CH2C_Chat> SendChatAsync(global::Proto.C2CH_Chat request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendChatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///聊天流 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CH2C_Chat> SendChatAsync(global::Proto.C2CH_Chat request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendChat, null, options, request);
      }
      /// <summary>
      ///玩家状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CH2C_QueryPlayerState QueryPlayerState(global::Proto.C2CH_QueryPlayerState request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryPlayerState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///玩家状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CH2C_QueryPlayerState QueryPlayerState(global::Proto.C2CH_QueryPlayerState request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryPlayerState, null, options, request);
      }
      /// <summary>
      ///玩家状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CH2C_QueryPlayerState> QueryPlayerStateAsync(global::Proto.C2CH_QueryPlayerState request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryPlayerStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///玩家状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CH2C_QueryPlayerState> QueryPlayerStateAsync(global::Proto.C2CH_QueryPlayerState request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryPlayerState, null, options, request);
      }
      /// <summary>
      ///push message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Google.Protobuf.WellKnownTypes.Any> Login(global::Proto.C2CH_Login request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///push message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Google.Protobuf.WellKnownTypes.Any> Login(global::Proto.C2CH_Login request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Login, null, options, request);
      }
      /// <summary>
      ///添加好友
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CH2C_LinkFriend LinkFrind(global::Proto.C2CH_LinkFriend request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LinkFrind(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///添加好友
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CH2C_LinkFriend LinkFrind(global::Proto.C2CH_LinkFriend request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LinkFrind, null, options, request);
      }
      /// <summary>
      ///添加好友
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CH2C_LinkFriend> LinkFrindAsync(global::Proto.C2CH_LinkFriend request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LinkFrindAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///添加好友
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CH2C_LinkFriend> LinkFrindAsync(global::Proto.C2CH_LinkFriend request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LinkFrind, null, options, request);
      }
      /// <summary>
      ///删除好友
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CH2C_UnLinkFriend UnLinkFrind(global::Proto.C2CH_UnLinkFriend request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnLinkFrind(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除好友
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CH2C_UnLinkFriend UnLinkFrind(global::Proto.C2CH_UnLinkFriend request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnLinkFrind, null, options, request);
      }
      /// <summary>
      ///删除好友
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CH2C_UnLinkFriend> UnLinkFrindAsync(global::Proto.C2CH_UnLinkFriend request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnLinkFrindAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除好友
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CH2C_UnLinkFriend> UnLinkFrindAsync(global::Proto.C2CH_UnLinkFriend request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnLinkFrind, null, options, request);
      }
      /// <summary>
      ///当前好友
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CH2C_QueryFriend QueryFriend(global::Proto.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryFriend(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///当前好友
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CH2C_QueryFriend QueryFriend(global::Proto.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryFriend, null, options, request);
      }
      /// <summary>
      ///当前好友
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CH2C_QueryFriend> QueryFriendAsync(global::Proto.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryFriendAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///当前好友
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CH2C_QueryFriend> QueryFriendAsync(global::Proto.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryFriend, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ChatServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ChatServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ChatServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendChat, serviceImpl.SendChat)
          .AddMethod(__Method_QueryPlayerState, serviceImpl.QueryPlayerState)
          .AddMethod(__Method_Login, serviceImpl.Login)
          .AddMethod(__Method_LinkFrind, serviceImpl.LinkFrind)
          .AddMethod(__Method_UnLinkFrind, serviceImpl.UnLinkFrind)
          .AddMethod(__Method_QueryFriend, serviceImpl.QueryFriend).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ChatServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SendChat, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.C2CH_Chat, global::Proto.CH2C_Chat>(serviceImpl.SendChat));
      serviceBinder.AddMethod(__Method_QueryPlayerState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.C2CH_QueryPlayerState, global::Proto.CH2C_QueryPlayerState>(serviceImpl.QueryPlayerState));
      serviceBinder.AddMethod(__Method_Login, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Proto.C2CH_Login, global::Google.Protobuf.WellKnownTypes.Any>(serviceImpl.Login));
      serviceBinder.AddMethod(__Method_LinkFrind, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.C2CH_LinkFriend, global::Proto.CH2C_LinkFriend>(serviceImpl.LinkFrind));
      serviceBinder.AddMethod(__Method_UnLinkFrind, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.C2CH_UnLinkFriend, global::Proto.CH2C_UnLinkFriend>(serviceImpl.UnLinkFrind));
      serviceBinder.AddMethod(__Method_QueryFriend, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Void, global::Proto.CH2C_QueryFriend>(serviceImpl.QueryFriend));
    }

  }
  public static partial class ChatServerService
  {
    static readonly string __ServiceName = "Proto.ChatServerService";

    static readonly grpc::Marshaller<global::Proto.Chat> __Marshaller_Proto_Chat = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Chat.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.PlayerState> __Marshaller_Proto_PlayerState = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.PlayerState.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.NotifyMsg> __Marshaller_Proto_NotifyMsg = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.NotifyMsg.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Void> __Marshaller_Proto_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Void.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.Chat, global::Proto.PlayerState> __Method_ChatRoute = new grpc::Method<global::Proto.Chat, global::Proto.PlayerState>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChatRoute",
        __Marshaller_Proto_Chat,
        __Marshaller_Proto_PlayerState);

    static readonly grpc::Method<global::Proto.NotifyMsg, global::Proto.Void> __Method_CreateNotify = new grpc::Method<global::Proto.NotifyMsg, global::Proto.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateNotify",
        __Marshaller_Proto_NotifyMsg,
        __Marshaller_Proto_Void);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.ChatServerReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of ChatServerService</summary>
    [grpc::BindServiceMethod(typeof(ChatServerService), "BindService")]
    public abstract partial class ChatServerServiceBase
    {
      /// <summary>
      ///push message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.PlayerState> ChatRoute(global::Proto.Chat request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///状态广播
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Void> CreateNotify(global::Proto.NotifyMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ChatServerService</summary>
    public partial class ChatServerServiceClient : grpc::ClientBase<ChatServerServiceClient>
    {
      /// <summary>Creates a new client for ChatServerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ChatServerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ChatServerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ChatServerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ChatServerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ChatServerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///push message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.PlayerState ChatRoute(global::Proto.Chat request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChatRoute(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///push message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.PlayerState ChatRoute(global::Proto.Chat request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChatRoute, null, options, request);
      }
      /// <summary>
      ///push message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.PlayerState> ChatRouteAsync(global::Proto.Chat request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChatRouteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///push message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.PlayerState> ChatRouteAsync(global::Proto.Chat request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChatRoute, null, options, request);
      }
      /// <summary>
      ///状态广播
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Void CreateNotify(global::Proto.NotifyMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNotify(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///状态广播
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Void CreateNotify(global::Proto.NotifyMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateNotify, null, options, request);
      }
      /// <summary>
      ///状态广播
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Void> CreateNotifyAsync(global::Proto.NotifyMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNotifyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///状态广播
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Void> CreateNotifyAsync(global::Proto.NotifyMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateNotify, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ChatServerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ChatServerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ChatServerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ChatRoute, serviceImpl.ChatRoute)
          .AddMethod(__Method_CreateNotify, serviceImpl.CreateNotify).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ChatServerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ChatRoute, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Chat, global::Proto.PlayerState>(serviceImpl.ChatRoute));
      serviceBinder.AddMethod(__Method_CreateNotify, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.NotifyMsg, global::Proto.Void>(serviceImpl.CreateNotify));
    }

  }
}
#endregion
