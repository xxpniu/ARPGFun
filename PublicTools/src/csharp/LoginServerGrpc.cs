// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: login_server.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Proto {
  public static partial class LoginServerService
  {
    static readonly string __ServiceName = "Proto.LoginServerService";

    static readonly grpc::Marshaller<global::Proto.C2L_Login> __Marshaller_Proto_C2L_Login = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.C2L_Login.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.L2C_Login> __Marshaller_Proto_L2C_Login = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.L2C_Login.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.C2L_Reg> __Marshaller_Proto_C2L_Reg = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.C2L_Reg.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.L2C_Reg> __Marshaller_Proto_L2C_Reg = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.L2C_Reg.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.C2L_Login, global::Proto.L2C_Login> __Method_Login = new grpc::Method<global::Proto.C2L_Login, global::Proto.L2C_Login>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_Proto_C2L_Login,
        __Marshaller_Proto_L2C_Login);

    static readonly grpc::Method<global::Proto.C2L_Reg, global::Proto.L2C_Reg> __Method_Reg = new grpc::Method<global::Proto.C2L_Reg, global::Proto.L2C_Reg>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Reg",
        __Marshaller_Proto_C2L_Reg,
        __Marshaller_Proto_L2C_Reg);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.LoginServerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of LoginServerService</summary>
    [grpc::BindServiceMethod(typeof(LoginServerService), "BindService")]
    public abstract partial class LoginServerServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Proto.L2C_Login> Login(global::Proto.C2L_Login request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.L2C_Reg> Reg(global::Proto.C2L_Reg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LoginServerService</summary>
    public partial class LoginServerServiceClient : grpc::ClientBase<LoginServerServiceClient>
    {
      /// <summary>Creates a new client for LoginServerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LoginServerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LoginServerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LoginServerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LoginServerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LoginServerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Proto.L2C_Login Login(global::Proto.C2L_Login request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.L2C_Login Login(global::Proto.C2L_Login request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.L2C_Login> LoginAsync(global::Proto.C2L_Login request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.L2C_Login> LoginAsync(global::Proto.C2L_Login request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      public virtual global::Proto.L2C_Reg Reg(global::Proto.C2L_Reg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Reg(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.L2C_Reg Reg(global::Proto.C2L_Reg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Reg, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.L2C_Reg> RegAsync(global::Proto.C2L_Reg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.L2C_Reg> RegAsync(global::Proto.C2L_Reg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Reg, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LoginServerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LoginServerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LoginServerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Login, serviceImpl.Login)
          .AddMethod(__Method_Reg, serviceImpl.Reg).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LoginServerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Login, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.C2L_Login, global::Proto.L2C_Login>(serviceImpl.Login));
      serviceBinder.AddMethod(__Method_Reg, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.C2L_Reg, global::Proto.L2C_Reg>(serviceImpl.Reg));
    }

  }
  public static partial class LoginBattleGameServerService
  {
    static readonly string __ServiceName = "Proto.LoginBattleGameServerService";

    static readonly grpc::Marshaller<global::Proto.S2L_CheckSession> __Marshaller_Proto_S2L_CheckSession = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.S2L_CheckSession.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.L2S_CheckSession> __Marshaller_Proto_L2S_CheckSession = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.L2S_CheckSession.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.S2L_CheckSession, global::Proto.L2S_CheckSession> __Method_CheckSession = new grpc::Method<global::Proto.S2L_CheckSession, global::Proto.L2S_CheckSession>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckSession",
        __Marshaller_Proto_S2L_CheckSession,
        __Marshaller_Proto_L2S_CheckSession);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.LoginServerReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of LoginBattleGameServerService</summary>
    [grpc::BindServiceMethod(typeof(LoginBattleGameServerService), "BindService")]
    public abstract partial class LoginBattleGameServerServiceBase
    {
      /// <summary>
      ///5
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.L2S_CheckSession> CheckSession(global::Proto.S2L_CheckSession request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LoginBattleGameServerService</summary>
    public partial class LoginBattleGameServerServiceClient : grpc::ClientBase<LoginBattleGameServerServiceClient>
    {
      /// <summary>Creates a new client for LoginBattleGameServerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LoginBattleGameServerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LoginBattleGameServerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LoginBattleGameServerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LoginBattleGameServerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LoginBattleGameServerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///5
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.L2S_CheckSession CheckSession(global::Proto.S2L_CheckSession request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///5
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.L2S_CheckSession CheckSession(global::Proto.S2L_CheckSession request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckSession, null, options, request);
      }
      /// <summary>
      ///5
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.L2S_CheckSession> CheckSessionAsync(global::Proto.S2L_CheckSession request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///5
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.L2S_CheckSession> CheckSessionAsync(global::Proto.S2L_CheckSession request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckSession, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LoginBattleGameServerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LoginBattleGameServerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LoginBattleGameServerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CheckSession, serviceImpl.CheckSession).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LoginBattleGameServerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CheckSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.S2L_CheckSession, global::Proto.L2S_CheckSession>(serviceImpl.CheckSession));
    }

  }
}
#endregion
